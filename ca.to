//
//Cellular automata : rule 90
//
do say("Cellular automata : rule 90") // print title

make int width = 100 // width of the automata
make array ruleset90 = [0, 1, 0, 1, 1, 0, 1, 0] // rule 90
make array data = [0,0] // data array
make int i = 0 // counter
do say(data)// print data
//do {//
//    set data += 0//
//    //set i++//
//} while (101 < width)//
//set data += [0]//
do say(data)// print data

/*

// Cellular Automata: Rule 90
console.log("Cellular Automata: Rule 90");

let ruleset90 = [0, 1, 0, 1, 1, 0, 1, 0];
let data = Array(1600).fill(0);
data[Math.floor(data.length / 2)] = 1;
let x = 0;

function setup() {
    createCanvas(400, 400);
    background(220);
    text('Cellular Automata: Rule 90', 10, 20);
    stroke('rgba(0,0,0,0.5)');
}

function draw() {
    for (let i = 0; i < data.length; i++) {
        if (data[i] === 1) {
            point(i / 2.6 - 108, x / 1.28);
        }
    }
    x += 1;
    data = findNextGeneration();
}

function findNextGeneration() {
    return data.map((_, j) => {
        // Get the left, current, and right neighbors using modulo for wrapping
        let left = data[(j - 1 + data.length) % data.length];
        let center = data[j];
        let right = data[(j + 1) % data.length];

        // Convert neighborhood to index for ruleset lookup
        let index = (left << 2) | (center << 1) | right;
        return ruleset90[index];
    });
}


or use this code for the same result simple 

//js p5 exampl

// Cellular automata : rule 90

console.log("Cellular automata : rule 90");

let ruleset90 = [0, 1, 0, 1, 1, 0, 1, 0];
let data = [];
let x = -1;

function setup() {
    createDataStart();
    createCanvas(400, 400);
    background(220);
    text('Cellular automata : rule 90', 10, 20);
    stroke('rgba(0,0,0,0.5)');
}

function draw() {
    for (i = 0; i < data.length; i++) {
        if (!data[i]) {
            point(i / 2.6 - 108, x / 1.28);
        }
    }
    x = x + 1;
    data = findResult();
}

function createDataStart() {
    for (i = 0; i < 1600; i++) {
        data.push(0);
    }
    data[Math.round(1600 / 2)] = 1;
}

function findResult() {
    let array = [];
    for (j = 0; j < 1600; j++) {
        outcome = 0;
        if (j == 0) {
            element1 = data[1600 - 1];
        } else {
            element1 = data[j - 1];
        }

        element2 = data[j];

        if (j == 1600 - 1) {
            element3 = data[0];
        } else {
            element3 = data[j + 1];
        }

        result = element1 + "-" + element2 + "-" + element3;

        if (result == "0-0-0") {
            outcome = ruleset90[0] ? 0 : 1;
        }
        if (result == "0-0-1") {
            outcome = ruleset90[1] ? 0 : 1;
        }
        if (result == "0-1-0") {
            outcome = ruleset90[2] ? 0 : 1;
        }
        if (result == "0-1-1") {
            outcome = ruleset90[3] ? 0 : 1;
        }
        if (result == "1-0-0") {
            outcome = ruleset90[4] ? 0 : 1;
        }
        if (result == "1-0-1") {
            outcome = ruleset90[5] ? 0 : 1;
        }
        if (result == "1-1-0") {
            outcome = ruleset90[6] ? 0 : 1;
        }
        if (result == "1-1-1") {
            outcome = ruleset90[7] ? 0 : 1;
        }
        array.push(outcome);
    }
    return array;
}




*/